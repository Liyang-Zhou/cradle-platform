stages:
  - build
  - test
  - format
  - deploy

variables:
  STAGING_BRANCH: "master"
  PROD_BRANCH: "prod"
  NODE_IMAGE: "node:14"
  PYTHON_IMAGE: "python:3.9.1-buster"

frontend build:
  stage: build
  needs: []
  image: $NODE_IMAGE
  tags:
    - docker
  rules:
    # ensure frontend builds if any frontend files have changed in the MR
    - if: '$CI_MERGE_REQUEST_ID != null'
      changes:
        - client/**/*
      when: always
    # always run if deploying to staging or prod
    - if: '$CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH'
      when: always
  before_script:
    - cd client
    - npm install
  script:
    - CI=false npm run build
  after_script:
    - tar -czvf frontend.tar.gz client/build
  artifacts:
    expire_in: 1 week
    paths:
      - frontend.tar.gz

backend unit tests:
  stage: test
  needs: []
  image: $PYTHON_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $STAGING_BRANCH'
      changes:
        - server/**/*
      when: always
  before_script:
    - cd server
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python -m pytest --junitxml=report.xml tests
  artifacts:
    expire_in: 1 week
    when: always
    reports:
      junit: server/report.xml

backend system tests:
  stage: test
  needs: []
  image: $PYTHON_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $STAGING_BRANCH'
      changes:
        - server/**/*
      when: always
  variables:
    DB_USERNAME: "root"
    DB_PASSWORD: "ci-password"
    EMAIL_USER: "ci@ci.com"
    EMAIL_PASSWORD: "ci-password"
    DB_HOSTNAME: "mysql"
    DB_PORT: "3306"
    DB_NAME: "cradle"
    PORT: "5000"
    MYSQL_DATABASE: "cradle"
    MYSQL_ROOT_PASSWORD: "ci-password"
    JWT_SECRET_KEY: "testkey"
  services:
    - mysql:5.7
  before_script:
    - apt-get update -y
    - apt-get install default-mysql-client -y
    - cd server
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python3 app.py &
    - python3 db.py rebuild --no-docker
    - python3 manage.py seed_test_data
  script:
    - python -m pytest --junitxml=report.xml systemTests
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: server/report.xml

frontend lint:
  stage: format
  needs: []
  image: $NODE_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $STAGING_BRANCH'
      changes:
        - client/**/*
      when: always
  before_script:
    - cd client
    - npm install
  script:
    - ./node_modules/.bin/eslint "src/**/*.{ts,tsx}"

frontend format:
  stage: format
  needs: []
  image: $NODE_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $STAGING_BRANCH'
      changes:
        - client/**/*
      when: always
  before_script:
    # Prettier version here should match version in package.json
    - npm install prettier@^2.2.0 --global
  script:
    - prettier --check "client/src/**/*.{ts,tsx}"

backend format:
  stage: format
  needs: []
  image: $PYTHON_IMAGE
  tags:
    - docker
  rules:
    - if: '$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == $STAGING_BRANCH'
      changes:
        - server/**/*
      when: always
  before_script:
    - pip install --upgrade pip
    - pip install black
  script:
    - black --check --exclude 'server/migrations/.*' server

deploy staging:
  stage: deploy
  tags:
    - shell
  rules:
    - if: '$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $STAGING_BRANCH'
      when: on_success
    - when: never
  script:
    - cp /var/cradle/.env ./.env
    - tar -xvf frontend.tar.gz
    - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up --force-recreate -d
    # wait for MySQL to start (up to 60 seconds) and then upgrade the database schema
    - docker exec flask timeout 60 bash -c "while ! bash -c 'echo > /dev/tcp/mysql/3306'; do sleep 1; done;" &>-
    - docker exec flask flask db upgrade

deploy prod:
  stage: deploy
  tags:
    - shell-prod
  rules:
    - if: '$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $PROD_BRANCH'
      # only manually deploy to production for greater control
      when: manual
    - when: never
  script:
    - cp /var/cradle/.env ./.env
    - tar -xvf frontend.tar.gz
    - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up --force-recreate -d
    # wait for MySQL to start (up to 60 seconds) and then upgrade the database schema
    - docker exec flask timeout 60 bash -c "while ! bash -c 'echo > /dev/tcp/mysql/3306'; do sleep 1; done;" &>-
    - docker exec flask flask db upgrade
