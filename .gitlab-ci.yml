stages:
    - build
    - test
    - deploy

variables:
    GIT_STRATEGY: none

before_script:
    - cd /var/www/cradle-platform
    - pwd
    - whoami
    - echo CI_MERGE_REQUEST_ID:$CI_MERGE_REQUEST_ID
    - echo CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH
    - echo CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - BRANCH_NAME="$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if [ -z "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]; then BRANCH_NAME=$CI_COMMIT_BRANCH; fi
    - echo BRANCH_NAME:$BRANCH_NAME
    - git checkout $BRANCH_NAME
    - git branch
    - git fetch --all
    - git reset --hard origin/$BRANCH_NAME
    - export COMPOSE_PROJECT_NAME=prod
    - export COMPOSE_HTTP_TIMEOUT=180

build:
    stage: build
    script:
        - echo "Building project..."
        - docker-compose -f docker-compose.${COMPOSE_PROJECT_NAME}.yml build
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "production"
        - if: $CI_COMMIT_BRANCH == "staging"
        - if: $CI_COMMIT_BRANCH == "master" 

test:
    stage: test
    script:
        - echo "Running tests..."
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "production"
        - if: $CI_COMMIT_BRANCH == "staging"
        - if: $CI_COMMIT_BRANCH == "master" 

deploy-general: 
    stage: deploy
    script:
        - echo "Starting MySQL Container"
        - bash server/prod/start_db.sh
    rules:
        - if: $CI_COMMIT_BRANCH == "production"
        - if: $CI_COMMIT_BRANCH == "master"
        - if: $CI_COMMIT_BRANCH == "staging"
    environment: production

deploy-prod:
    stage: deploy
    script: 
        - echo "Deploying project to production..."
        - if docker volume inspect "${COMPOSE_PROJECT_NAME}_client_build" ; then docker-compose -f docker-compose.${COMPOSE_PROJECT_NAME}.yml down; docker volume rm "${COMPOSE_PROJECT_NAME}_client_build"; fi
        - docker-compose -f docker-compose.${COMPOSE_PROJECT_NAME}.yml up -d --force-recreate
    rules:
        - if: $CI_COMMIT_BRANCH == "production"
        - if: $CI_COMMIT_BRANCH == "master"
          when: manual 
    environment: production

deploy-staging:
    stage: deploy
    before_script:
        - cd /var/www/cradle-platform-test
        - pwd
        - whoami
        - echo CI_MERGE_REQUEST_ID:$CI_MERGE_REQUEST_ID
        - echo CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH
        - echo CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
        - BRANCH_NAME="$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        - if [ -z "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]; then BRANCH_NAME=$CI_COMMIT_BRANCH; fi # if this job wasn't trigged by a merge request, set the branch name to the commit branch name
        - echo BRANCH_NAME:$BRANCH_NAME
        - git checkout $BRANCH_NAME
        - git branch
        - git fetch --all
        - git reset --hard origin/$BRANCH_NAME
        - export COMPOSE_PROJECT_NAME=staging
        - export COMPOSE_HTTP_TIMEOUT=180
    script: 
        - echo "Deploying project to staging..."
        - docker-compose -f docker-compose.${COMPOSE_PROJECT_NAME}.yml build
        - if docker volume inspect "${COMPOSE_PROJECT_NAME}_client_build" ; then docker-compose -f docker-compose.${COMPOSE_PROJECT_NAME}.yml down; docker volume rm "${COMPOSE_PROJECT_NAME}_client_build"; fi
        - docker-compose -f docker-compose.${COMPOSE_PROJECT_NAME}.yml up -d --force-recreate
    rules:
        - if: $CI_COMMIT_BRANCH == "master"
        - if: $CI_COMMIT_BRANCH == "staging"
    environment: staging
